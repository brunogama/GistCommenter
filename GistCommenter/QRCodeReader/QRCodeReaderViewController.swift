//
//  QRCodeReaderViewController.swift
//  GistCommenter
//
//  Created Bruno Gama on 21/03/2018.
//  Copyright © 2018 Bruno Gama. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import AVFoundation
import UIKit

internal final class QRCodeReaderViewController: UIViewController,
                                               QRCodeReaderViewProtocol {

	var presenter: QRCodeReaderPresenterProtocol?
    var captureSession: AVCaptureSession = AVCaptureSession()
    var videoPreviewLayer: AVCaptureVideoPreviewLayer?
    private var hasCameraPermissions: Bool {
        return AVCaptureDevice.authorizationStatus(for: .video) == .authorized
    }

    @IBOutlet weak var statusLabel: UILabel!

    var qrCodeViewFinder: UIView?

    public override func viewDidLoad() {
        super.viewDidLoad()
        setupVideoSession()
        setupViews()
        self.navigationController?.isNavigationBarHidden = true
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationController?.isNavigationBarHidden = false
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        updateStatusLabelAndTitle(L10n.detecting)
        if !hasCameraPermissions {
            AVCaptureDevice.requestAccess(for: .video) { granted in
                if !granted {
                    Logger.w("Denied camera permissions")
                    self.presentCameraPermissionWarning()
                }
            }
        }
    }

    // MARK: - Private methods

    fileprivate func setupVideoSession() {
        let deviceTypes = [AVCaptureDevice.DeviceType.builtInWideAngleCamera, .builtInDualCamera]
        let discoverySession = AVCaptureDevice.DiscoverySession(deviceTypes: deviceTypes,
                                                                mediaType: .video,
                                                                position: .back)

        setupCaptureSession(discoverySession: discoverySession)
        setupPreviewLayer()
    }

    fileprivate func setupCaptureSession(discoverySession: AVCaptureDevice.DiscoverySession) {
        guard let captureDevice = discoverySession.devices.first else {
            fatalError("Failed to get the camera device")
        }

        do {
            let input = try AVCaptureDeviceInput(device: captureDevice)
            captureSession.addInput(input)
        }
        catch {
            Logger.e(error.localizedDescription)
            return
        }

        let captureMetadataOutput = AVCaptureMetadataOutput()
        captureSession.addOutput(captureMetadataOutput)
        guard let delegate = presenter?.interactor as? AVCaptureMetadataOutputObjectsDelegate else {
            Logger.w("Delegate not set")
            return
        }
        captureMetadataOutput.setMetadataObjectsDelegate(delegate, queue: DispatchQueue.main)
        captureMetadataOutput.metadataObjectTypes = [.qr]
    }

    fileprivate func setupPreviewLayer() {
        videoPreviewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
        videoPreviewLayer?.videoGravity = AVLayerVideoGravity.resizeAspectFill
        videoPreviewLayer?.frame = view.layer.bounds
        captureSession.startRunning()
    }

    fileprivate func setupQrViewFinder() {
        self.qrCodeViewFinder = UIView()

        if let qrCodeViewFinder = qrCodeViewFinder {
            qrCodeViewFinder.layer.borderColor = UIColor.orange.cgColor
            qrCodeViewFinder.layer.borderWidth = 2
            self.view.addSubview(qrCodeViewFinder)
            self.view.bringSubview(toFront: qrCodeViewFinder)
        }
    }

    internal func updateStatusLabelAndTitle(_ title: String) {
        statusLabel.text = title
        self.title = statusLabel.text
    }

    fileprivate func setupViews() {
        guard let layer = videoPreviewLayer else {
            fatalError("Video layer is required for this view controller")
        }
        setupQrViewFinder()
        self.view.layer.addSublayer(layer)
        self.view.bringSubview(toFront: statusLabel)
        setupQrViewFinder()
    }

    // MARK: - QRCodeReaderViewProtocol

    func presentCameraPermissionWarning() {
        self.updateStatusLabelAndTitle(L10n.cameraNotAvailable)

        let alert = UIAlertController(title: L10n.alertTitleCameraPermission,
                                      message: L10n.alertMessageCameraPermission,
                                      preferredStyle: .alert)

        let action = UIAlertAction(title: L10n.settings, style: .default) { _ in
            guard let appSettings = URL(string: UIApplicationOpenSettingsURLString) else {
                return
            }

            UIApplication.shared.canOpenURL(appSettings)
        }

        alert.addAction(action)

        let cancel = UIAlertAction(title: L10n.ok, style: .cancel)
        alert.addAction(cancel)

        self.present(alert, animated: true)
    }

    func received(metadata: AVMetadataMachineReadableCodeObject?) {
        if let readableContent = metadata {
            if readableContent.type == AVMetadataObject.ObjectType.qr {
                guard let string = readableContent.stringValue,
                let barCodeBounds = videoPreviewLayer?.transformedMetadataObject(for: readableContent)?.bounds else {
                    return
                }

                qrCodeViewFinder?.frame = barCodeBounds
                self.updateStatusLabelAndTitle(string)
            }
        }
        else {
            qrCodeViewFinder?.frame = CGRect.zero
            self.updateStatusLabelAndTitle(L10n.detecting)
        }
    }
}
