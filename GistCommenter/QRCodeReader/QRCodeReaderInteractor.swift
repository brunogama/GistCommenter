//
//  QRCodeReaderInteractor.swift
//  GistCommenter
//
//  Created Bruno Gama on 21/03/2018.
//  Copyright © 2018 Bruno Gama. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Moya
import UIKit

internal class QRCodeReaderInteractor: NSObject, QRCodeReaderInteractorInputProtocol,
RemoteDataManagerOutputProtocol {

    weak var presenter: QRCodeReaderInteractorOutputProtocol?
    var codeReader: QRCodeReadable?
    var remoteDataManager: RemoteDataManagerInputProtocol?

    // MARK: - QRCodeReaderInteractorInputProtocol

    func didReceived(data: QRCodeReadable.QRCodeData) {
        presenter?.didReceived(data: data)

        if isGistHost(string: data.value) {
            if let url = URL(string: data.value) {
                retrieve(url: url)
            }
        }
    }

    func startReader() {
        codeReader?.startReading { stringValue, scannedCodeArea in
            self.didReceived(data: (stringValue, scannedCodeArea))
        }
    }

    func stopReader() {
        codeReader?.stopReading()
    }

    func retrieve(url: URL) {
        guard let substring = URLComponents(url: url, resolvingAgainstBaseURL: true)?
            .path
            .split(separator: "/")
            .last else {
                Logger.e("Failed to parse gist id")
                return
        }

        let gistId = String(substring)

        remoteDataManager?.retriveGist(with: gistId)
    }

    // MARK: - RemoteDataManagerOutputProtocol
    func onGistRetrieved(_ gist: GistModel) {
        presenter?.open(gist: gist)
    }

    func onGistRetrievalFailure(_ error: Error) {
        Logger.e("\(error)")
    }

    func onCommentsRetrieved(_ comments: [GistComment]) {}

    func onCommentsRetrievalFailure(_ error: Error) {}
}
