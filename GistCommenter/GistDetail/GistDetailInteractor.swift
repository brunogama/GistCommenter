//
//  GistDetailInteractor.swift
//  GistCommenter
//
//  Created Bruno Gama on 23/03/2018.
//  Copyright © 2018 Bruno Gama. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Moya
import UIKit

internal final class GistDetailInteractor: GistDetailInteractorInputProtocol, RemoteDataManagerOutputProtocol {

    weak var presenter: GistDetailInteractorOutputProtocol?
    var remoteDataManager: RemoteDataManagerInputProtocol?

    func retrieveComments(fromGistId: GistId) {
        remoteDataManager?.retriveComments(with: fromGistId)
    }

    func didReceived(comments: [GistComment]) {
        presenter?.didReceived(comments: comments)
    }

    func onCommentsRetrieved(_ comments: [GistComment]) {
        presenter?.didReceived(comments: comments)
    }

    func onCommentsRetrievalFailure(_ error: Error) {
        presenter?.didReceived(comments: [])
    }

    func retrieveCrendetials(username: String, password: String) {
        remoteDataManager?.retrieveToken(forUsername: username, with: password) { result in
            switch result {
            case .success:
                self.presenter?.authenticated()
            case .failure:
                self.presenter?.authenticationFail()
            }
        }
    }

    func sendMessage(forGistId: GistId, message: String) {
        remoteDataManager?.send(message: message, forGist: forGistId) { result in
            switch result {
            case .success(let gistComment):
                self.presenter?.onMessageSent(message: gistComment)
            case .failure:
                self.presenter?.onMessageFailure()
            }
        }
    }

    func onGistRetrieved(_ gist: GistModel) { }
    func onGistRetrievalFailure(_ error: Error) { }
}
