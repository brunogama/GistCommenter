//
//  GistDetailProtocols.swift
//  GistCommenter
//
//  Created Bruno Gama on 23/03/2018.
//  Copyright © 2018 Bruno Gama. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Moya
import UIKit

// MARK: Wireframe -
internal protocol GistDetailWireframeProtocol: class {

    func showRaw(gist: GistModel)
}

// MARK: Presenter -
internal protocol GistDetailPresenterProtocol: class {

    var interactor: GistDetailInteractorInputProtocol? { get set }

    func viewDidLoad()
}

// MARK: Interactor -
internal protocol GistDetailInteractorOutputProtocol: class {

    /* Interactor -> Presenter */
    func didReceived(comments: [GistComment])
}

internal protocol GistDetailInteractorInputProtocol: class {
    var presenter: GistDetailInteractorOutputProtocol? { get set }
    var remoteDataManager: MoyaProvider<GistService>? { get set }

    func retrieveComments(with gistId: GistId)

    /* Presenter -> Interactor */
}

// MARK: View -
internal protocol GistDetailViewProtocol: class {

    var presenter: GistDetailPresenterProtocol? { get set }
    var datasource: (GistDetailDatasourceProtocol & UITableViewDataSource)? { get set }
    /* Presenter -> ViewController */

    func loading()
    func hideLoading()
    func show(comments: [GistComment])
}
